package chap08_02;

public class Hero {
	String name;
	int hp;
	public void attack() {

	}
	public void sleep() {
		this.hp = 100;
		System.out.println(this.name + "は、眠って回復した！");

	}
	public void sit(int sec) {
		this.hp += sec;
		System.out.println(this.name + "は、" +sec + "秒座った！");
		System.out.println("HPが" + sec + "ポイント回復した！");
	}
	public void slip() {
		this.hp -= 5;
		System.out.println(this.name + "は、転んだ！");
		System.out.println("5のダメージ");

	}
	public void run() {
		System.out.println(this.name + "は、逃げ出した！");
		System.out.println("GAME OVER");
		System.out.println("最終HPは" + this.hp + "でした");

	}

}
//0と１を代入するパターンをやる。それを２と表現。だからiのlengthは２
//０＋０、０＋１、１＋０、１＋１のパターンになる
//数字で始まる変数名は使えtないよ
//使えるのはアルファべっと、数字、＿、＄
//数字ではじまるのはなし
//好きにつけていいのは識別子という
//使用可能な変数名→エラーが出ないやつという意味
//内のforと外のforをかけると答えを求められる
//オブジェクト指向　現実のせｋaいの登場人物とそのふるまいを、コンピューターｎa胃の世界で再現する
//責務＝クラスに処理を書いていくということ
//行動責任＝操作すること＝メソッド
//口座残高をしっかり覚えておくという情報保持責任を負っている＝属性＝変数
//オブジェクト＝クラス
//行動指示
//継承　過去に作った部品を再利用する
//多態性　小さな違いを気にせず使うやつ
//カプセル化　一部の相手からは利用禁止にしちゃうやつ　出的な？
//完璧に理会する必要はないよ　
//３回くらい繰り返す　たぶんもっと繰り返すだろうなあ
//------------------------------練習問題７-------------------------------------------
//電車に乗る　販売所　行先　切符買う　車掌さんが切符を買ったかどうか確認する　降りる時に切符を回収
//結婚相談所　男性　女性　仲介人　情報登録　会う
//現在航行中の飛行機と空港を管理する。航空管制システム
//食材料理レシピ
//タッチパネル
//案内係オブジェクト
//メソッド　検索する条件を聞く　調べる　返す　データベースから変数　持つ情報を
//メソッド　お店の名前、場所、平均価格を調べる検索する表示する　データベース　お店の名前、場所、平均価格、外観、内観、歴史的背景
//タイ焼き　金型　生み出されたタイ焼きがオブジェクト
//オブジェクトのことはインスタンスと表現する　わかりやすくするため　仮想世界で活動する実体
//クラス＝金型、設計図　インスタンス＝生成された実体＝タイ焼き、自動車、
//二つともオブジェクト
//p310
//クラスの属性はクラスメソッドの中で定義する
//クラスメソッドの中で宣言された変数をフィールド変数という
//このフィールド変数のことだよ＝this.
//クラス図は違う言語も同じ？
//クラス名属性操作
//ローカル変数とフィールド変数
//this=自分自身のインスタンス　.は日本語でのの意味
//staticは基本つけない
//メッソド名は操作だから動詞で名づける
//thisをつけるのはフィールド変数にだけ
//フィールド変数じゃないものにはthisはつけてはいけない
//クラス型　System 基本型とクラス型の定義のしかたは似てるけど。
//インスタンスを生成して代入じはクラス型
//変数を宣言して代入はリテラル　変数ただのみたいな意味かな
//
//
//
//
//
////
//
//
////
//
//
//
//

//同じパッケージに入っているときはimportはいらない
//クラス名だけでいい完全限定クラス名いらない
//１秒は１０００ミリ秒
//Thread sleep(3000);
//java.langはimportは必要ない
//

//ソースファイルをコンパイルしの意味がわからなかった
//プログラミング言語ごと機械語は別物
//コンパイルは英語で翻訳という意味
//だからソースファイルをコンパイルしてというのは、
//プログラミング言語からバイトコードに翻訳してという意味
//こんどは　それをするにはどうすればいいのかということ
//バイナリーフォルダが関連していると思う
//コンピュータの心臓部の名前はCPU
//ソースコード→材料生地
//コンパイル→こねる
//インタプリタ（JVM）→焼き上げ
//パンを作る工程として思い出そう
//コンパイラとインタプリタってソフトウェアなんだ！へー
//代表的な9つの種類データ型
//byte, short, int, long, float, double, boolean, char, String
//710ページ
//long 300000L, float 50.3F, char '', String ""
//エスケープシーケンス\" " \' ' \\ \ \n
//式計算処理をすることを式を評価するというらしい(笑)
//a += 2; → a = a + 2;
//インクリメント＋＋」デクリメントーー
//７６ページわからない
//型の箱が大きければ無理くり強制代入できるよ
//ピザをむりくり弁当箱に詰め込むときと同じ
//int m = Math.max(1,2);比較してれる便利メソッド
//文字列を数値に変換する命令
//int n = Integer.parseInt(age);
//parseって解析するって意味なんだね！湊くん
//integerは整数って意味なんだね！湊くん
//乱数を発生させる命令
//int m = new java.util.Random().nextInt();
//int m = new java.util.Random().nextInt();
//int m = new java.util.Scanner(System.in).nextInt();
//int n = new java.util.Scanner(System.in).nextLine();
//制御構文は３つ
//順次、分岐、繰り返し、
//順次、分岐、繰り返し、順次、分岐、繰り返し、順次、分岐、繰り返し
//if(tenki == true)
//while 繰り返しwhile繰り返し
//whileとforの違い　forは条件式と初期化、変化式が書ける
//whileは条件式のみ
//do whileは条件式の判定の前に実行してあとから判定する
//行動派と計画派みたいな感じ。人間のプログラムをシンプルに表わしてるなあ
//a != b aがbでなかったら
//if(a == "晴れ")←はい！！！間違いです！！(笑)捕まえた！

//break;
//if(a.equals("")
//&&→ and、 ||→ or
//int fortune = new java.util.Random().nextInt(4)+1;
//for文とswitch文の違いと使い分けの基準がわからない
//break文とcontinue文は両方とも中断する方法continue文はその周だけ中断するという意味
//int[] n = {1,2,4,5,6};
//配列はロッカー。番地は鍵。水木さんのあれメモリの話わかりやすかったな。どんなんだっけ？
//多次元配列は飯塚さんの上からみたやつがわかりやすかったじな
//多次元配列は配列の中に配列を入れるってやつ。男の中の男ってやつ(笑)
//戻り値は結果を表示
//オーバーロードとは？！
//多重定義　同じ名前のメソッドを定義すること
//でも確かパッケージが違えばオッケー「なんだよね
//でも、型、数、順番が違えばオッケーなんだ
//パッケージが違えばオッケー「ってクラス名だったかも
//コマンドライン引数
//javac Calc.java CalcLogic.java
//dir
//実行　java クラス名　mainメソッドがあるクラスの名前を指定する
//java コマンドはどのmainメソッドを起動するか？
//javac どのソースファイルをコンパイルするか？
//総合開発環境エクリプスのこと
//
//通常はお客様にアカウントを作成していただきIAMをもらって作業するのが一般的
//納品はサーバー周り「もできないとだめ
//
////オーバーロードは多重定義法
//バッティングしちゃってるって意味じゃない
//重なっててもできる方法って意味
//java.util.Arrays.sort(heights); heightsに入っている配列を並べ替える
//パッケージ名さえ違えば同じクラス名が使える
//完全限定クラス名FQCN
//public static void main(String[] args)
//コマンドライン引数
//オーバーロード多重定義法
////p172二次元配列の宣言int [][] m = new int[][];
//p153
//p119
//new java.util.Scanner(System.in).nextInt();
//p93　ｐ８１
//finalは定数
//オブジェクト指向は、仮想世界を現実世界のようにい扱うことだよ
//まさに動いているようにイメージできるかが大切
//まずは考え方をとらえることが大切
//仮想世界で活動するやつをインスタンス　またはオブジェクト
//インスタンスをうみだす金型がクラス
//
//AWS　
//VPCはバーチャル　プライベート　クラウドの略
//基本的にVPCは必要だけど、AWSが自動的に用意してくれる
//リージョンはデータセンターがある場所
//AZとは、「データセンター」のこと
//サブネットとは、ある1つの大きなネットワークの中を
//さらに小さく分割した小規模ネットワーク＝ネットワークの範囲のことをさします。
//Amazon EC2とはAWSが提供する「仮想サーバー」のこと
//インスタンスとはAWS クラウドに立てられた仮想サーバーのこと
//Elasticは弾力のあるみたいな意味。　だから柔軟だみたいな意味合いだろうね
//Amazon EBSとはAWS上で操作できる仮想ディスクのこと。
//管理コンソールからEBSボリュームを作って、それをサーバーインスタンスへ接続、切断できます。
//接続することをアタッチ、切断をデタッチと呼びます。
//Amazon RDSとはAmazonの提供するリレーショナルデータベースサービスのこと
//MySQLやPostgreSQL、Oracle、SQL Serverなど多くの種類のデータベースを、
//管理画面から設定するだけで構築・設定して利用できる
//IAMとはAWS上のサービスを操作するユーザーとアクセス権限を管理するやつ
//AmazonS3とはAmazonが提供するストレージサービス。
//バケットと呼ばれるリソース（入れ物）にデータを保存する
//保存できるデータ容量に上限がない
//Amazon CloudWatchとは、AWSが提供する「フルマネージド運用監視サービス
//AWSの各種リソースを監視してくれるサービス
//異常が生じた時にはそれをアラートで知らせるだけではなく、
//自動復旧も可能で、AWS上で監視を行う際には欠かせない存在
//
//オブジェクト指向は１００％使う
//必ず使う
//実際に番地があるのはnew Heroがあるとこにある
//Hero hに番地を代入しているだけ
//参照とかいう言葉は実際の現場では使わないよ
//インスタンスの独立性　同じクラスから生まれても、インスタンスが違えばお互いにえいｋｙ負うは受けないよ
//newの回数
//クラスといういのを一つの型として扱うようにできるよになる
//int Stringとかと同じように！
//Stringもどっかの誰かが作ってくれたクラス
//だから大文字。
//equalsはString型のメソッド　equals() length()
//番地めぐりをしている
//h.name.equals("ミナト")
//Heroクラスのname情報はnameの番地を見に行く。その中にeqalsメソッドというのがあるからそれを使おう
//参照といういのは番地で管理されている
//こういう仕組みがあるからこそ、newは２回使わないといけないようということ
//番地をコピーしている　インスタンスそのものをコピーしているわけではない
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

