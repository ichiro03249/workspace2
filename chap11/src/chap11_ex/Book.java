package chap11_ex;

public class Book extends TangibleAsset{

	String isbn;



	public Book(String name, int price, String color, double weight, String isbn) {
		super(name, price, color, weight);
		this.isbn = isbn;
	}



	public String getIsbn() {
		return this.isbn;
	}
}
//-------------p454練習問題-------------
//コンストラクタの意味がわかってない
//なぜここで必要なのか？
//setter getterを使う意味もよくわかってない
//コンストラクタのsuper(name, price);の引数が
//親のコンストラクタの仮引数として渡される
//でもこのコンストラクタたちはそれぞれ日本語でいうとなにをしているんだろう？ということがまだわかっていない
//
//p460
//多態性は継承を理解していないと使えない
//多態性の学習のコツ
//あいまいなイメージ　あるものをざっくり捉えること！
//厳密に言えばauperHeroなんだけどザックリ言えばHeroだよね　という感じ
//is aの関係の親で言うってこと
//犬ってザックリ言えば動物だよねっていう関係性
//ザックリ捉える方法をプログラムでも実現する機能が多態性！
//
//abstractのクラスでも箱の変数は作れるけど、
//new 〇〇の方には作れない
//Character c = new SuperHero();
//変数cというのはあくまでCharacter型として捉えていますよということ
//is aの関係じゃないとできないよ
//絵を思い描く方が最初はやりやすいかも
//
//p467
//
//
//3/1
//黒本　java silver
//インターフェイスはフィールドない
//全部abstracｔ抽象メソッド
//多態性
//子クラスのインスタンスは親クラスの型に代入できる
//でっかい箱にはちっさい箱は入る
//ちっさい箱にはでっかい箱は入らない　物理的な法則と同じだから覚えやすいね
//p469
//抽象クラスはインスタンス化できない
//
//Character c = new Wizard();もできる
//でっかい箱に入ったら中のちっさいクラスのメソッドは呼び出せなくなる
//親クラスが持ってるメソッドなら呼びだせる
//p475
//箱の型　どのメソッドを呼べるかを決定する→
//中身の型　メソッドが呼ばれたら、どう動くかを決定する
//実吉さんのハンドメイド練習問題の回答
//ジリリリン
//ペタペタ
//ポチポチ
//おおまかなこと　まずどこを見ないといけないかを知ること
//多態性のとこだと、まずは親クラスが持ってるメソッドを見る
//親クラスに書かれていれば呼びだせる
//フィールドも親クラスが持っていないと呼びだせなくなる
//p477
//p81のキャストと同じ書き方で代入できる
//Wizard w = (Wizard)c;
//ダウンキャスト

//ｐ４７８
//Character c -= new Wizard();
//Hero h = (Hero)c;
//コンパイルは通すけど、実行するとClassCastExceptionというエラーが発生する
//p479
//インスタンスを代入可能かチェックできる
//instanceof演算子
//変数　instanceof 型名
//型名の箱に代入可能ならtrueが帰ってくる
//if(c instanceof SuperHero)がtrueなら実行する→boolean型の時は == trueを書かなくてもいいんだよね
//SuperHero h = (SuperHero)c;
//------------------実吉さんハンドメイド練習問題---------------------
//true
//false
//true
//false
//Car c  = BigTruck();
//c instanceof Bigtruck
//c instanceof PickupTruck
//c instanceof Truck
//c instanceof CampCar
//
//p480
//多態性のメリット
//呼びだせるメソッドが減ると不便じゃね？
//
//p482
//キャラクターの配列
//
//p483
//Monsterクラスを継承しているものならすべて攻撃できるようになる
//メソッドの仮引数の型を統一できて処理が一つで済む
//
//p485
//for(Monster m:monsters)拡張for文で取り出す
//
//逃げろ　run();
//各々の逃げ方をする　各々のクラスのrun()
//ここがp475の親のクラスを見るというところじゃないかなあ
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


