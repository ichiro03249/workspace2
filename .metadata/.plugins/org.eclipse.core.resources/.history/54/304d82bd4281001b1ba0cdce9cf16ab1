package chap17_02;

public class Main {

	public static void main(String[] args) {
		// TODO 自動生成されたメソッド・スタブ

		String day = "2021-3-09";
				if(day.equals( "2021-3-09")) {
					for (int i = 0; i < 10; i++){
					System.out.println("正解");
					}
				}else {
					System.out.println("異常");
				}


//		try {
//			FileWriter fw = new FileWriter("data.txt");
//			System.out.println("正常です");
//		}catch(IOException e){
//			System.out.println("エラーが発生しました。");
//		}
//



	}

}

//---------------------3/8 若菜さん-------------------------------
//----------------p648----------------------
//不具合対策こそが腕の見せ所
//
//①syntax error 文法間違い
//コンパイラが指摘したコードの箇所を修正する
//②runtime error 範囲外の要素へのアクセス、０での割り算、存在しないファイルのオープン
//例えば配列の要素の長さを超えたインデックスの指定
//あらかじめエラーが発生したときのための処理を書いておく
//③logic error　文法に問題ないし強制終了もしない。想定内容と違う結果を得てしまう
//例えば、計算結果がおかしいなど
//自力で原因箇所を探して修正する
//
//p653//
//例外処理の流れ
//
//p655
//新しい例外処理の方法
//try //本来の処理
//catch//例外処理
//sysout("エラーです。中断します")みたいな感じ
//
//try-catch文
//tryブロックの実行中に例外的状態が発生したら
//処理がcatchブロックに移行する
//例外的状況が発生しているかどうかをチェックする面倒な作業はJVMに任せることで、
//開発者はが負う責任を軽減してくれる
//
//p657
//例外クラス
//
//例外的状況にはいろいろある
//ファイルがない　メモリがない　変数がnullなど
//
//例外クラスの種類
//error　回復見込みがない状況
//exception　回復見込みがあるなど
//
//①error系例外
//
//②exception系例外
//ネットあわーくに接続できないｔなど
//
//③
//RuntimeException系例外
//必ずしもm発生を想定すべきとまでは言えない
//
//p660
//特に注目してほしいのは
//exception系例外
//try-catch文で例外が発生したときの代替処理を用意しておかないとコンパイルエラーになる
//
//p662
//発生する例外の調べ方
//throwsが書かれている　Exception系の例外が発生する可能性がある
//
//p664
//例外インスタンスの利用
//
//p665
//スタックトレース
//
//p666
//さまざまなcatch構文
//try-catch構文の基本構文
//try
//本来の処理
//catch(例外クラス　変数名)
//例外が発生した場合の処理
//
//catch(IOException | NullPointerException e)
//で一つにまとめることができる
//
//p668
//後片付け処理への対応
//ファイルは開いたら閉じるのが決まり
//
//p670
//例外発生してもしなくてもお必ず実行する処理
//try
//catch
//finally
//
//finallyブロックは必ず最後に実行される
//開いたデータベースやネットワーク接続を閉じるなど
//
//p672
//close()にまつわる複雑なエラーと解決方法
//
//djangoはpythonのフレームワーク
//高品質なアプリを少ないコードで書くことができる
//簡単なものなら数分でできてしまったりする
//特徴
//ユーザー認証　管理画面　サイトの案内ページ　RSSフィード付き
//セキュリティが安心
//拡張性・柔軟性が高い　ファイルは役割が決まっていて切り分けができる
//用途が広い　会社や政府にも使われている　管理システム　ソーシャルネットワーク　科学技術計算
//
//p676
//;だけは空文という
//わざと書いていないのか書き忘れかなんなのか区別をつけるために記述する
//
//p677
//finallyに対してnullの時はだめだよの処理を書く
//複雑になる
//
//p678
//try-with-resources文を使うとシンプルなコードになる
//try-catch文を抜ける時に自動的にclose()が呼びださせれるので
//finallyブロックの記述は不要になる
//
//	code java7以降はtry-with-resourcesが使える
//
//p680
//例外の伝播
//
//p682
//チェック例外の伝播とスロー宣言
//
//p683
//
//p684
//例外処理方針①
//発生する可能性があるすべてのチェック例外をtry-catch文で処理する
//例外処理方針②
//メソッド定義にスロー宣言をする　
//会社みたいなもん
//不祥事のもみ消しのようなことはしない
//通常は空のcatchブロックは避けるようにする
//
//スロー宣言をするとcatchの義務がなくなるよ　若菜さん談
//
//p685
//例外を発生させる
//throw new IOException("エラーメッセージ");
//
//
//	String s = null;
//try {
//
//	System.out.println(s.length());
//
//}catch(NullPointerExcecption e) {
//System.out.println( "NullPointerExcecption 例外をcatchしました");
//System.out.println("ここから------------");
//e.printStackTrace();
//System.out.println("ここまで------------");
//}

//p690練習問題
//INteger.parseInt()を調べる
//catch(Number)
//
//public static void main(String[] args) throws IOException
//sysoutプログラムが起動しました
//throw new IOException();
//
//

//-------------------------3/9 若菜さん------------------------------------
//テスト答え合わせオブジェクト指向①
//1 A
//2　継承　多態性
//3　B
//4✕　B staticがついていないと使えない　１４章静的メソッドp548　
//5　this.val = val
//6　B
//7✕　protected p498
//8✕　子（クラス）
//9✕　E(0) フィールドはオーバーライドしてはいけないから　setterを使うべし p382
//10　C
//11　B
//12✕　extends Card implements Serializable,Runnable ああ、nが一つ抜けてたんだ
//
//テスト答え合わせオブジェクト指向②
//1　①カプセル化　②private　③getter　④setter　⑤public
//2　①private　②public　③String　④void　⑤this.code
//3　B
//4　抽象クラス
//5✕　protected
//6　オーバーロード
//7　オーバーライド
//8　runメソッドはfinalがついているのでオーバーライドできない
//9①abstract　②System.out.println　③new　④✕2　⑤✕animal.cry()
//
//
// . $file .
//print '<a href="download.php?aaa=' . $file . '">'.$title.'</a><br />';
//<a href="download.php?aaa=hogehoge">hoge</a>
//https://teratail.com/questions/57239
//
//const name2 = '{{$name}}';
//
//--------------p697----------------------
//
//p703
//スマートフォンアプリを作る
//JVMでもJava以外の言語を使える
//javaで作るwebアプリケーションの部品をサーブレットという
//
//p706
//
//
//------------------------3/10 若菜さん------------------------------------
//Linux
//ドキュメント管理ツール
//p8/21
//useradd　新しいユーザーを作成
//passwd　作成済みのユーザーにパスワードを設定するためのコマンド
//
//
//
//
//
//
